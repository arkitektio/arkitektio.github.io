"use strict";(self.webpackChunkdoks=self.webpackChunkdoks||[]).push([[9960],{3094:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"developers/python/graphql","title":"Developing with GraphQL","description":"As stated in the API section, the GraphQL API is the primary way to interact with the platform. This section will guide you through the process of developing with the GraphQL API","source":"@site/docs/developers/python/graphql.mdx","sourceDirName":"developers/python","slug":"/developers/python/graphql","permalink":"/docs/developers/python/graphql","draft":false,"unlisted":false,"editUrl":"https://github.com/arkitektio/arkitektio.github.io/edit/master/docs/developers/python/graphql.mdx","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"id":"graphql","title":"Developing with GraphQL","sidebar_label":"Developing with GraphQL","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/docs/developers/python/installation"},"next":{"title":"Classic Style","permalink":"/docs/developers/python/classical/"}}');var o=n(74848),r=n(28453);const s={id:"graphql",title:"Developing with GraphQL",sidebar_label:"Developing with GraphQL",sidebar_position:7},a="Developing with GraphQL",h={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Generating Code",id:"generating-code",level:2},{value:"Using the Generated Code",id:"using-the-generated-code",level:2},{value:"Why we love this",id:"why-we-love-this",level:3}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"developing-with-graphql",children:"Developing with GraphQL"})}),"\n",(0,o.jsxs)(t.p,{children:["As stated in the ",(0,o.jsx)(t.a,{href:"/docs/design/api",children:"API"})," section, the GraphQL API is the primary way to interact with the platform. This section will guide you through the process of developing with the GraphQL API\nform the comfort of your python environment."]}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["This guide is an emerging documentation for now check out ",(0,o.jsx)(t.a,{href:"htps://github.com/jhnnsrs/turms",children:"turms"})," for more information."]})}),"\n",(0,o.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(t.p,{children:["While developing Arkitekt applications, you will often need to interact with the GraphQL API. To retrieve and manipulate data, you will need to write queries and mutations.\nOf course you can do this manually by writing the queries and mutations in plain python string and then sending them to the server using a library like ",(0,o.jsx)(t.code,{children:"requests"}),". However, this can be error-prone and time-consuming,\nespecially because we will only receive plain JSON responses from the server. Wouldn't it be nice if we could have a more pythonic way of interacting with the GraphQL API?\nAnd get typed responses from the server? This is where code generation comes in."]}),"\n",(0,o.jsxs)(t.p,{children:["In this guide, we will show you how to use the ",(0,o.jsx)(t.code,{children:"turms"})," library which is as build-in integration with the Arkitekt CLI to generate python code for interacting with the GraphQL API,\nand how to use the generated code in your application."]}),"\n",(0,o.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(t.p,{children:"For this guide, you will need to have the following installed:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Python 3.6 or higher"}),"\n",(0,o.jsx)(t.li,{children:"Arkitekt CLI"}),"\n"]}),"\n",(0,o.jsxs)(t.admonition,{type:"note",children:[(0,o.jsxs)(t.p,{children:["You need to have installed the Arkitekt CLI together with our code generating library ",(0,o.jsx)(t.code,{children:"turms"})," to follow this guide. If you didn't install it (or you are not sure), you can do so by running the following command:"]}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"pip install turms>=0.5.0 black\n"})})]}),"\n",(0,o.jsx)(t.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,o.jsx)(t.p,{children:"To get started, you will need to create a new project using the Arkitekt CLI. You can do this by running the following command:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"\narkitekt init\n\n"})}),"\n",(0,o.jsx)(t.p,{children:"This will create a new project in the current directory. You can then navigate to the project directory and run the following command to initialize the code generation\nfor the GraphQL API:"}),"\n",(0,o.jsx)(t.p,{children:"We can now generate a configuration file for our code generation for our project by running the following command:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"arkitekt gen init mikro\n"})}),"\n",(0,o.jsx)(t.p,{children:"It will ask you where you want to generate the module for your generated code. Leave it as the default and press enter."}),"\n",(0,o.jsxs)(t.p,{children:["This will generate a ",(0,o.jsx)(t.code,{children:"graphql.config.yaml"})," file in the root of your project. This file contains the configuration for the code generation. You can open the file and modify the configuration to suit your needs.\nBut for now, we will use the default configuration. You can read more about the configuration options in the documentation for the ",(0,o.jsx)(t.code,{children:"turms"})," library."]}),"\n",(0,o.jsxs)(t.p,{children:["When running the command you should now also have a new folder called ",(0,o.jsx)(t.code,{children:"graphql"})," in your project directory. This folder contains all of your documents and schemas that are necessary for the code generation.\nYou will also find an empty ",(0,o.jsx)(t.code,{children:"mikro"})," folder in this directory. This is where we will place our documents that we want to generate code for."]}),"\n",(0,o.jsxs)(t.admonition,{type:"note",children:[(0,o.jsxs)(t.mdxAdmonitionTitle,{children:["Why the nested ",(0,o.jsx)(t.code,{children:"mikro"})," folder?"]}),(0,o.jsx)(t.p,{children:"The graphql folder cannot only hold documents for one of the many arkitekt services. Therefore, we use to the convention of a nested folder to specify which service we want to generate code for.\nAs this will be the source of truth for the code generation, we think its best to be tidy and organized. (Of course you can choose your own path in the configuration file)"})]}),"\n",(0,o.jsx)(t.h2,{id:"generating-code",children:"Generating Code"}),"\n",(0,o.jsxs)(t.p,{children:["Lets generate some code for our project. We will start by creating a new document in the ",(0,o.jsx)(t.code,{children:"mikro"})," folder. Just add a new file called ",(0,o.jsx)(t.code,{children:"first_query.graphql"})," and add the following content:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-graphql",children:"\nquery FirstQuery {\n  datasets {\n    id\n    name\n  }\n}\n\n"})}),"\n",(0,o.jsx)(t.p,{children:"This is a simple query that retrieves all datasets from the server. After saving we can generate the code for this query by running the following command in the base directory of your project:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"\narkitekt gen compile mikro\n\n"})}),"\n",(0,o.jsxs)(t.p,{children:["This should now create a directory named ",(0,o.jsx)(t.code,{children:"api"}),' in the same directory, that contains the generated code for the query in the "mikro.py" file. You can now use this code in your application to interact with the GraphQL API.']}),"\n",(0,o.jsx)(t.h2,{id:"using-the-generated-code",children:"Using the Generated Code"}),"\n",(0,o.jsx)(t.p,{children:"To use the generated code, you will need to import the generated query and use it to interact with the GraphQL API. You can do this by running the following code:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'from arkitekt import easy\nfrom api.mikro import first_query\n\n# Create a new app\napp = easy("my_test_app")\n\n# Run the query\nwith app:\n    datasets = first_query()\n    print(datasets)\n\n'})}),"\n",(0,o.jsx)(t.p,{children:"Thats its you have now successfully generated and used code for interacting with the GraphQL API. You can now use this code in your application to interact with the API, and always\nbe sure that you are getting the correct data types from the server."}),"\n",(0,o.jsx)(t.h3,{id:"why-we-love-this",children:"Why we love this"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Type Safety"}),": The generated code is fully typed, so you can be sure that you are getting the correct data types from the server."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Easy to use"}),": The generated code is easy to use, so you can quickly get started with interacting with the GraphQL API."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Completely Documentend"}),": The generated code is fully documented directly from our API documentation. Just inspect some fields."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Traitfull"}),": Turms has the neat concepts of adding traits to the graphql types. Imagine traits like mixins, that allow you to add speciic logig to the return types (e.g. getting the numpy array for a zarr store field)"]}),"\n"]})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var i=n(96540);const o={},r=i.createContext(o);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);