"use strict";(self.webpackChunkdoks=self.webpackChunkdoks||[]).push([[2531],{28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var n=s(96540);const i={},r=n.createContext(i);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(r.Provider,{value:t},e.children)}},36293:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"design/terminology/apps-vs-services","title":"Apps vs Services","description":"The Arkitekt platform revolves around the Concepts of Apps and Services. These two concepts are the building blocks of the platform and are used to define the architecture of the system.","source":"@site/docs/design/terminology/apps_vs_services.mdx","sourceDirName":"design/terminology","slug":"/design/terminology/apps-vs-services","permalink":"/docs/design/terminology/apps-vs-services","draft":false,"unlisted":false,"editUrl":"https://github.com/arkitektio/arkitektio.github.io/edit/master/docs/design/terminology/apps_vs_services.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"apps-vs-services","title":"Apps vs Services","sidebar_label":"Apps vs Services","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Workflow","permalink":"/docs/design/terminology/workflow"},"next":{"title":"Assignation","permalink":"/docs/design/terminology/assignation"}}');var i=s(74848),r=s(28453);const o={id:"apps-vs-services",title:"Apps vs Services",sidebar_label:"Apps vs Services",sidebar_position:4},a="Apps vs Services",p={},c=[{value:"Services",id:"services",level:2},{value:"Apps",id:"apps",level:2},{value:"Interplay between Apps and Services",id:"interplay-between-apps-and-services",level:2}];function d(e){const t={a:"a",admonition:"admonition",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"apps-vs-services",children:"Apps vs Services"})}),"\n",(0,i.jsx)(t.p,{children:"The Arkitekt platform revolves around the Concepts of Apps and Services. These two concepts are the building blocks of the platform and are used to define the architecture of the system.\nIn this section, we will discuss the differences between Apps and Services and how they are used in the platform."}),"\n",(0,i.jsx)(t.h2,{id:"services",children:"Services"}),"\n",(0,i.jsxs)(t.p,{children:["Services are the building blocks of the Arkitekt ",(0,i.jsx)(t.strong,{children:"Server"})," and are making up the backbone of your analysis. They are web-based applications that are running on the server and are used to provide\ncommon functionality and ways of retrieving and updating data. As opposed to Apps, Services are not user-facing and are not meant to be used directly by a user.\nInstead, they are used by Apps to provide the necessary functionality to the user."]}),"\n",(0,i.jsx)(t.p,{children:"Services in the Arkitekt sense never really do anything on their own in the analysis sense, they rather provide a way for Apps to do things.\nFor example, a Service might provide a way to retrieve (query) data from a database, or to send a notification to a user. This means that for the most\npart Services are stateless."}),"\n",(0,i.jsx)(t.h2,{id:"apps",children:"Apps"}),"\n",(0,i.jsx)(t.p,{children:"Apps are the true stars of the Arkitekt platform and your analysis. While Services provide only primitives to store and retrieve data, Apps will actually do something with that data.\nDepending on what type of analysis you are doing, Apps can be anything from a simple web application that visualizes your data (such as Orkestrator) to a complex machine learning model that\nruns in a docker container on the servers (a Plugin). Importantly Apps can choose to expose part of their functionality to the users, which can then remotely instruct the App to do something.\nThis functionality then also becomes available to other Apps, and in Workflows, so that you can create a net of functionality in your lab."}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["While Apps ",(0,i.jsx)(t.strong,{children:"can"})," chose to expose functionality, they are not required to do so. For example you could design an Arkitekt App that just connects to the server in order to visualize some data."]})}),"\n",(0,i.jsxs)(t.p,{children:["Apps come in two big flavours, Standalone Apps and Plugins. To read more about these, see the ",(0,i.jsx)(t.a,{href:"/docs/apps",children:"Apps"})," section."]}),"\n",(0,i.jsx)(t.h2,{id:"interplay-between-apps-and-services",children:"Interplay between Apps and Services"}),"\n",(0,i.jsx)(t.p,{children:"Apps and Services are designed to work together in order to provide the necessary functionality to the user. Services provide the necessary primitives to store and retrieve data, while Apps\nprovide the functionality to do something with that data. This means that Services are used by Apps to provide the necessary functionality to the user."}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["As Apps ",(0,i.jsx)(t.strong,{children:"depend"})," on Services to provide the necessary functionality, you can only run Apps with your Arkitekt Server that has the necessary Services installed. No worries, the Arkitekt platform\nwill automatically check for this and let you know if you are missing any Services. And of course you can always install the necessary Services yourself."]})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);