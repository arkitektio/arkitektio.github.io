"use strict";(self.webpackChunkdoks=self.webpackChunkdoks||[]).push([[8898],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var o=n(96540);const r={},i=o.createContext(r);function a(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:t},e.children)}},33791:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"developers/python/plugin/more","title":"Lets get it rolling","description":"So we just created our first app. And ran it against the Arkitekt Server. But what did we just do ? And saying my name is not really","source":"@site/docs/developers/python/plugin/more.mdx","sourceDirName":"developers/python/plugin","slug":"/developers/python/plugin/more","permalink":"/docs/developers/python/plugin/more","draft":false,"unlisted":false,"editUrl":"https://github.com/arkitektio/arkitektio.github.io/edit/master/docs/developers/python/plugin/more.mdx","tags":[],"version":"current","frontMatter":{"id":"more","title":"Lets get it rolling","sidebar_label":"Lets get it rolling"},"sidebar":"tutorialSidebar","previous":{"title":"On Building your Plugin","permalink":"/docs/developers/python/plugin/build"},"next":{"title":"Getting Started","permalink":"/docs/developers/python/plugin/getting-started"}}');var r=n(74848),i=n(28453);n(86035);const a={id:"more",title:"Lets get it rolling",sidebar_label:"Lets get it rolling"},s=void 0,l={},d=[{value:"Adapting our real App",id:"adapting-our-real-app",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"So we just created our first app. And ran it against the Arkitekt Server. But what did we just do ? And saying my name is not really\nuseful. So lets dive a bit deeper and lets create a real app"}),"\n",(0,r.jsx)(t.h2,{id:"adapting-our-real-app",children:"Adapting our real App"}),"\n",(0,r.jsx)(t.p,{children:"Lets adapt our app to do something useful. We will create a simple app that will allow us to max project a microscopy image of our\nchoice. So how do we do that ? Lets look at the code we created, before and deduce what we need to change."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'from arkitekt import register\n\n@register\ndef hello_world(name: str) -> str:\n    """Hello World\n\n    This is a simple Hello World Node, that will greet you by your name.\n    and print it to the console.\n\n    Args:\n        name (str): Your name\n\n    Returns:\n        str: A greeting\n    """\n    greeting = f"Hello {name}"\n    print(greeting)\n    return greeting\n'})}),"\n",(0,r.jsxs)(t.p,{children:["So what do we need to change ? First of all we need to change the name of the function. We will call it ",(0,r.jsx)(t.code,{children:"max_project"}),". Then we need to\nchange the documentation. We will call it ",(0,r.jsx)(t.code,{children:"Max Project"})," and we will change the description to ",(0,r.jsx)(t.code,{children:"Max Project a microscopy image"}),". Documentation\nyour functions is very important. It will help you and others to understand what your function does. And it will help you to find your function\nin the UI."]}),"\n",(0,r.jsxs)(t.p,{children:['But how do we tell Arkitekt that we are no longer working with strings but need "Images"? This is done through updating the type hint of our function. We will change it from ',(0,r.jsx)(t.code,{children:"str"})," to ",(0,r.jsx)(t.code,{children:"Representation"}),",\nan import for the ",(0,r.jsx)(t.code,{children:"mikro"})," python package. When  register a function the SDK will automatically detect the type hint and will create the correct input and output ",(0,r.jsx)(t.a,{href:"/docs/design/terminology/port",children:"Port"}),", for you.\nThis means you have to (almost) always use type hints to indicate the type of your input and output. But hey you should do that anyway."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'from arkitekt import register\nfrom mikro import Representation\n\n@register\ndef max_project(image: Representation) -> Representation:\n    """Max Project a microscopy image\n\n    This is a simple node that will max project a microscopy image.\n\n    Args:\n        image (Representation): The input image\n\n    Returns:\n        str: The output image\n    """\n    print(f"Max Projecting {image}")\n    ...\n    return image\n'})}),"\n",(0,r.jsx)(t.p,{children:"And that is it."}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"Representation"})," type from the ",(0,r.jsx)(t.code,{children:"mikro"})," is our first ",(0,r.jsx)(t.a,{href:"/docs/design/terminology/structure",children:"Structure"}),". Structures represent more complex data types, then\nsimple types like ",(0,r.jsx)(t.code,{children:"String"})," or ",(0,r.jsx)(t.code,{children:"Int"}),". While most of the time you will find yourself working with sharable global structures (that live on a connected\nservice), you can also create your own structures (even non serializable), that are only available to your app. We will cover this in a later tutorial."]})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},86035:(e,t,n)=>{n.d(t,{BK:()=>s});var o=n(96540),r=n(29813),i=n(74848);const a=({src:e,autoPlay:t=!0,speed:r=1.5,...a})=>{const s=(0,o.useRef)(null),[l,d]=(0,o.useState)();return(0,o.useEffect)((()=>{n.e(6636).then(n.bind(n,56636)).then((e=>{d(e)}))}),[]),(0,o.useEffect)((()=>{const n=s.current;console.log(e);const o=l?.create(e,n,{autoPlay:t,speed:r,...a});return()=>{o?.dispose()}}),[e,l,a]),(0,i.jsxs)("div",{className:"coding inverse-toggle px-1 py-1 shadow-lg text-gray-100 text-sm  bg-[#121314] rounded-lg leading-normal overflow-hidden",children:[(0,i.jsxs)("div",{className:"top mb-2 mt-1 flex",children:[(0,i.jsx)("div",{className:"h-2 w-2 bg-red-500 rounded-full"}),(0,i.jsx)("div",{className:"ml-2 h-2 w-2 bg-orange-300 rounded-full"}),(0,i.jsx)("div",{className:"ml-2 h-2 w-2 bg-green-500 rounded-full"})]}),(0,i.jsx)("div",{className:"mt-1 w-full",children:(0,i.jsx)("div",{ref:s})})]})},s=e=>(0,i.jsx)(r.A,{fallback:(0,i.jsx)("div",{children:"Hallo"}),children:()=>(0,i.jsx)(a,{...e})})}}]);