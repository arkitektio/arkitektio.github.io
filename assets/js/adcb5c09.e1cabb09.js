"use strict";(self.webpackChunkdoks=self.webpackChunkdoks||[]).push([[9533],{47051:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>h,default:()=>f,frontMatter:()=>d,metadata:()=>u,toc:()=>c});var a=o(83117),n=(o(67294),o(3905));o(15944);const r=o.p+"assets/medias/reserve_workflow-a52bfcdd8b9f2a6e508a998184ead52d.webm",i=o.p+"assets/medias/run_analysis-8792674f04019c4ad211407e292ee1ca.webm",s=o.p+"assets/medias/replay-6091f816f453188fed8e5f027be7915e.webm";o(64237);const l=o.p+"assets/medias/provenance-4d0730fb8b6236716edc538f8d80c9d8.webm",d={title:"Your first Workflow Run",sidebar_label:"8. Your first Workflow Run",sidebar_position:8},h=void 0,u={unversionedId:"introduction/first_steps/first_run",id:"introduction/first_steps/first_run",title:"Your first Workflow Run",description:"We are finally there, we can run our first workflow. In this section we will run our first workflow, that we designed in the previous section.",source:"@site/docs/introduction/first_steps/first_run.mdx",sourceDirName:"introduction/first_steps",slug:"/introduction/first_steps/first_run",permalink:"/docs/introduction/first_steps/first_run",draft:!1,editUrl:"https://github.com/jhnnsrs/doks/edit/master/docs/introduction/first_steps/first_run.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Your first Workflow Run",sidebar_label:"8. Your first Workflow Run",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"7. Designing your first workflow",permalink:"/docs/introduction/first_steps/first_workflow"},next:{title:"9. Done?",permalink:"/docs/introduction/first_steps/done"}},p={},c=[{value:"How to reserve a workflow",id:"how-to-reserve-a-workflow",level:2},{value:"Run our analysis",id:"run-our-analysis",level:2},{value:"Lets inspect our image",id:"lets-inspect-our-image",level:2}],k={toc:c},w="wrapper";function f(e){let{components:t,...o}=e;return(0,n.kt)(w,(0,a.Z)({},k,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"We are finally there, we can run our first workflow. In this section we will run our first workflow, that we designed in the previous section.\nRemember it will take an image , max project it, threshold it and then measure the fraction of the image that is below the threshold, to\nestimate the fraction of the image that is not covered by cells.\nIn this section you will learn:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"How to reserve a workflow"),(0,n.kt)("li",{parentName:"ul"},"Where to look when your workflow is not available"),(0,n.kt)("li",{parentName:"ul"},"How to run a workflow"),(0,n.kt)("li",{parentName:"ul"},"How to monitor the progress of a workflow"),(0,n.kt)("li",{parentName:"ul"},"How to inspect the result of a workflow")),(0,n.kt)("h2",{id:"how-to-reserve-a-workflow"},"How to reserve a workflow"),(0,n.kt)("p",null,"Lets start by reserving our workflow. For this we will navigate to the ",(0,n.kt)("inlineCode",{parentName:"p"},"Dashboard"),' tab. Search our Workflow title (which is now a Node) and right-click on the "Reserve" button. This will reserve our workflow for us.'),(0,n.kt)("video",{autoPlay:!0,muted:!0,loop:!0,controls:!0,className:"rounded rounded-md my-3",width:"100%"},(0,n.kt)("source",{src:r})),(0,n.kt)("p",null,'Pretty straight forward right? Its the same as reserving a normal node, but now we are reserving a workflow. You will notice however that at the end of the reservation\nwe illustrate another feature of the Platform. The user clicked on the reservation and then after clicking on the first provision we were transported to the "Monitor Page":'),(0,n.kt)("p",null,'A workflow includes nodes, and these nodes are the "dependencies" of the workflow. In order to run a workflow we need to make sure that all the nodes are available\nand ready to be used. When we reserve a workflow, the ',(0,n.kt)("inlineCode",{parentName:"p"},"Scheduler"),' will in turn reserve all the nodes that are part of the workflow. And then it will wait until they are\navailable. This is what we see in the "Monitor Page". Here we can see the status of all the nodes that are part of the workflow. And we can see if they are ready to be used (green)\nor not (red). If they are not ready to be used we can click on the node and see why they are not ready to be used. Most of the time this means you have to start or restart\nthe linked application.'),(0,n.kt)("admonition",{title:"The Monitor Page",type:"info"},(0,n.kt)("p",{parentName:"admonition"},"The monitor page illustrates an important concept of the platform. As Arkitekt with a distributed system, we need to keep track of what can run when. Workflows are a perfect\nexample of this. In order to run a workflow we need to make sure that all the nodes are available. This ",(0,n.kt)("inlineCode",{parentName:"p"},"Dependency Graph Management")," is a core feature of the platform, and will\nfind its explaination in the ",(0,n.kt)("a",{parentName:"p",href:"/docs/design/provisions"},"Provision and Reservation")," section. Btw, in the next generation of rekuest, we will make this a lot more intuitive. That's\nthe hope at least.")),(0,n.kt)("h2",{id:"run-our-analysis"},"Run our analysis"),(0,n.kt)("p",null,'And now we can finally run our analysis. Lets start by navigating to the "Data" tab. Lets use the same image as we used in the previous section.'),(0,n.kt)("video",{autoPlay:!0,muted:!0,loop:!0,controls:!0,className:"rounded rounded-md my-3",width:"100%"},(0,n.kt)("source",{src:i})),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Navigate to our data in the ",(0,n.kt)("inlineCode",{parentName:"li"},"Data")," tab")),(0,n.kt)("p",null,'Lets inspect our data in the "Data" tab. We should see our data in the "Data" tab. (If you are doing this part of the tutorial,\non another day you might need to open the "Home", sidebar and step back one day to see your data.)'),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"Drag and Drop or right click the image the ",(0,n.kt)("inlineCode",{parentName:"li"},"@mikro/representation")," we want to convert")),(0,n.kt)("p",null,'This time in our Action menu we will see a new option. "Analysis Run", this is our first ',(0,n.kt)("inlineCode",{parentName:"p"},"Workflow Action"),". Lets drop on it (or click it)."),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"You are prompted with a dialog.")),(0,n.kt)("p",null,"This dialog is our first encounter with an Arkitekt ",(0,n.kt)("inlineCode",{parentName:"p"},"Assign")," dialog. Here Arkitekt will ask us to confirm the assignment."),(0,n.kt)("ol",{start:4},(0,n.kt)("li",{parentName:"ol"},"This is new!")),(0,n.kt)("p",null,"You might notice that you are immediately transported to the ",(0,n.kt)("inlineCode",{parentName:"p"},"Run")," page, where you can inspect the progress and result. Its a bit fast.\nBut you can always go back in time. Just click on the live button in the bottom left, corner. And you will be transported back in time\nand you can scan through the history of your run (current bug, you might need to refresh the page (right clikc -> refresh) to scan)"),(0,n.kt)("admonition",{title:"The Run Page",type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Everytime you run a workflow, Arkitekt will create a ",(0,n.kt)("inlineCode",{parentName:"p"},"Run")," for you. This run will keep track of the progress of your workflow, and will also keep track of the result of your workflow.\nA run is not only an indicator of the live progress of your workflow, but will also be your go to point to inspect the processing pipeline and potential debug entrypoint. All data is\nlinked in your run and can be exported (e.g. in your methods section just like here). You can find your latest runs in the ",(0,n.kt)("inlineCode",{parentName:"p"},"Workflow")," tab.")),(0,n.kt)("video",{autoPlay:!0,muted:!0,loop:!0,controls:!0,className:"rounded rounded-md my-3",width:"100%"},(0,n.kt)("source",{src:s})),(0,n.kt)("div",{className:"text-gray-400 mb-2"},(0,n.kt)("small",null,"When double clicking on the node in replay or live mode in a run, you can inspect the data flowing through the graph. Not to helpful here, but very much so in the advanced workflows."," ")),(0,n.kt)("h2",{id:"lets-inspect-our-image"},"Lets inspect our image"),(0,n.kt)("p",null,"But lets not only look at our workflow. Just like we did in the previous section, we can also inspect our image. Lets start by clicking on the ",(0,n.kt)("inlineCode",{parentName:"p"},"Data")," tab."),(0,n.kt)("video",{autoPlay:!0,muted:!0,loop:!0,controls:!0,className:"rounded rounded-md",width:"100%"},(0,n.kt)("source",{src:l})),(0,n.kt)("p",null,"While you click on your image, you will now see that there is derived images that are linked to your image. These are the images that are created throughout the workflow.\nJust explore this datagraph. You can click on the images and inspect them."),(0,n.kt)("admonition",{title:"The Data Graph vs the Provenance Graph",type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Interestingly there is two types of graphs that are linked to your data. The ",(0,n.kt)("inlineCode",{parentName:"p"},"Data Graph")," and the ",(0,n.kt)("inlineCode",{parentName:"p"},"Provenance Graph"),". The ",(0,n.kt)("inlineCode",{parentName:"p"},"Data Graph")," is the graph that is created through\ninterlinking of data by the application itself (e.g. a thresholding algorithm can decide to declare that the thresholded image is a derivative of the original image). The\n",(0,n.kt)("inlineCode",{parentName:"p"},"Provenance Graph")," is however a graph that is created through keeping track which ",(0,n.kt)("inlineCode",{parentName:"p"},"Node")," task created an image. If you click on the ",(0,n.kt)("inlineCode",{parentName:"p"},"Provenance")," icon you will see a reference\nto the ",(0,n.kt)("inlineCode",{parentName:"p"},"Assignation")," (i.e. the Task) that created that image. And that task will in turn have a reference to the ",(0,n.kt)("inlineCode",{parentName:"p"},"Workflow Assignation")," that created it.")))}f.isMDXComponent=!0},64237:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/medias/roi_mark-66f8a3e39fe18f5556269a314e488e00.webm"}}]);