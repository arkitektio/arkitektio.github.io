"use strict";(self.webpackChunkdoks=self.webpackChunkdoks||[]).push([[5808],{76956:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>a,toc:()=>u});var t=n(85893),o=n(11151);const l={id:"build",title:"Building your Plugin",sidebar_label:"On Building your Plugin"},r="Building your Plugin",a={id:"developers/python/plugin/build",title:"Building your Plugin",description:"Introduction",source:"@site/docs/developers/python/plugin/build.mdx",sourceDirName:"developers/python/plugin",slug:"/developers/python/plugin/build",permalink:"/docs/developers/python/plugin/build",draft:!1,unlisted:!1,editUrl:"https://github.com/arkitektio/arkitektio.github.io/edit/master/docs/developers/python/plugin/build.mdx",tags:[],version:"current",frontMatter:{id:"build",title:"Building your Plugin",sidebar_label:"On Building your Plugin"},sidebar:"tutorialSidebar",previous:{title:"Plugin Style",permalink:"/docs/developers/python/plugin/"},next:{title:"Lets get it rolling",permalink:"/docs/developers/python/plugin/more"}},s={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Packaging your Plugin",id:"packaging-your-plugin",level:2},{value:"Start Building",id:"start-building",level:3},{value:"The Dockerfile",id:"the-dockerfile",level:3},{value:"The config.yaml",id:"the-configyaml",level:3},{value:"Building the container",id:"building-the-container",level:3},{value:"Staging a build",id:"staging-a-build",level:3},{value:"Publishing a build",id:"publishing-a-build",level:3},{value:"Conclusion",id:"conclusion",level:3}];function d(e){const i={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"building-your-plugin",children:"Building your Plugin"}),"\n",(0,t.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(i.p,{children:"In this section, we will learn how to build an Arkitekt plugin from your python code.\nWe will also learn how to package and distribute your plugin so that it can be discovered and\nuser by others."}),"\n",(0,t.jsx)(i.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(i.p,{children:"Before we start, make sure you have created your plugin and have it working in your local environment.\nAlso check if that plugin is working with your local Arkitekt instance."}),"\n",(0,t.jsx)(i.h2,{id:"packaging-your-plugin",children:"Packaging your Plugin"}),"\n",(0,t.jsx)(i.p,{children:"To package your plugin, you will need to create a software container around your python app, that will include\nall the dependencies and the code. In a default configuration, Arkitekt uses Docker to build and run plugins."}),"\n",(0,t.jsx)(i.h3,{id:"start-building",children:"Start Building"}),"\n",(0,t.jsxs)(i.p,{children:["To start building your plugin, you will have to initialize a ",(0,t.jsx)(i.code,{children:"Builder"})," for your project. You can do this by running the following command:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"arkitekt port init\n"})}),"\n",(0,t.jsx)(i.p,{children:'This will ask you a few questions about your project and will create a new builder in your project ".arkitekt" directory. The content of\nthis directory will look something like this:'}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:".arkitekt\n\u251c\u2500\u2500 builders\n\u2502\xa0\xa0 \u251c\u2500\u2500 default\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Dockerfile\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 config.yaml\n"})}),"\n",(0,t.jsxs)(i.p,{children:["This is your first builder. A builder is a way of bundling your code and dependencies into a container. The ",(0,t.jsx)(i.code,{children:"Dockerfile"})," is the file that\nwill be used to build the container. The ",(0,t.jsx)(i.code,{children:"config.yaml"})," file is the configuration file for the builder, and help the Arkitekt Server and\nconnected tools to understand if the build container fits the underlying hardware of the server."]}),"\n",(0,t.jsx)(i.admonition,{title:"On builders",type:"note",children:(0,t.jsxs)(i.p,{children:["You can have multiple builders in your project. Each builder can be used to build a different version of your plugin.\nFor example, you can have a builder that allows you to bundle your dockercontainer to support CUDA and another one that\nsupports only CPU. By specifiying the right ",(0,t.jsx)(i.code,{children:"selectors"})," in your ",(0,t.jsx)(i.code,{children:"config.yaml"})," file, you can make sure that the right builder\nis used for the right hardware of the server that is running your plugin."]})}),"\n",(0,t.jsx)(i.h3,{id:"the-dockerfile",children:"The Dockerfile"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"Dockerfile"})," is the file that will be used to build the container. It is a simple text file that contains a list of commands that\nthe Docker daemon will execute to build the container. Arkitekt has no specific requirements for the ",(0,t.jsx)(i.code,{children:"Dockerfile"}),", besides that you need\nto include the app.py and the .arkitekt folder in the container and that on execution it should be in the current working directory."]}),"\n",(0,t.jsxs)(i.p,{children:["A simple ",(0,t.jsx)(i.code,{children:"Dockerfile"})," for a python plugin could look like this:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-Dockerfile",children:"FROM python:3.8-slim\n\nRUN mkdir /app\nWORKDIR /app\nCOPY . /app\n\nRUN pip install --no-cache-dir -r requirements.txt\n\n"})}),"\n",(0,t.jsxs)(i.p,{children:["This ",(0,t.jsx)(i.code,{children:"Dockerfile"})," will create a container based on the ",(0,t.jsx)(i.code,{children:"python:3.8-slim"})," image, and will install the requirements from the ",(0,t.jsx)(i.code,{children:"requirements.txt"})," file\nthat is in the root of your project. It will also copy the rest of the files in the root of your project to the ",(0,t.jsx)(i.code,{children:"/app"})," directory in the container."]}),"\n",(0,t.jsx)(i.admonition,{title:"On Paths",type:"note",children:(0,t.jsxs)(i.p,{children:["The paths in the ",(0,t.jsx)(i.code,{children:"Dockerfile"})," are relative to the root of your project. This means that you need to have a ",(0,t.jsx)(i.code,{children:"requirements.txt"})," file in the root of your project,\nnot in the ",(0,t.jsx)(i.code,{children:".arkitekt"})," directory."]})}),"\n",(0,t.jsx)(i.h3,{id:"the-configyaml",children:"The config.yaml"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"config.yaml"})," file is the configuration file for the builder. It contains a list of selectors that will be used to determine if the builder\nis compatible with the server that is running the plugin. The ",(0,t.jsx)(i.code,{children:"config.yaml"})," file will look something like this:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:"selectors:\n"})}),"\n",(0,t.jsx)(i.p,{children:"This file is empty by default. You can add selectors to the file to make sure that the builder is only used on servers that have the right hardware\nto run the container. For example, if you have a builder that supports CUDA, you can add a selector that checks if the server has a GPU:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:"selectors:\n  - type: cuda \n    minimun_compute_capability: 3.5\n"})}),"\n",(0,t.jsx)(i.p,{children:"This will make sure that the builder is only used on servers that have a GPU with a compute capability of 3.5 or higher.\nWe are still working on the documentation for the selectors, so for now, you can check the source code of the Arkitekt Server to see what selectors are available."}),"\n",(0,t.jsx)(i.h3,{id:"building-the-container",children:"Building the container"}),"\n",(0,t.jsx)(i.p,{children:"To build the container and your plugins, you can run the following command:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"arkitekt port build\n"})}),"\n",(0,t.jsx)(i.p,{children:"This will build the container with your local docker daemon and add a new build in your local directory.\nImportantly this build is not yet published and uploaded and can only be used on your local machine."}),"\n",(0,t.jsx)(i.h3,{id:"staging-a-build",children:"Staging a build"}),"\n",(0,t.jsx)(i.p,{children:"Staging a Build allows you to test out your just build plugin against your local Arkitekt instance. To stage a build, you can run the following command:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"arkitekt port stage\n"})}),"\n",(0,t.jsx)(i.p,{children:"This will run the container locally and will instruct it to connect to your local Arkitekt instance.\nThis will allow you to test your plugin in a real environment, as it would happen when you would publish your plugin.\nThis is a great way to test your plugin before you publish it."}),"\n",(0,t.jsx)(i.h3,{id:"publishing-a-build",children:"Publishing a build"}),"\n",(0,t.jsx)(i.p,{children:"To publish a build, you can run the following command:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"arkitekt port publish\n"})}),"\n",(0,t.jsx)(i.p,{children:'This is the final step in the process of building your plugin. This will upload your container to a registry, and will create\na new "deployment" of your plugin in the local directory. If you push your directory to a git repository, you can now point any\nArkitekt instance to this repository and it will be able to discover and use your plugin.'}),"\n",(0,t.jsx)(i.admonition,{title:"On Versioning",type:"warning",children:(0,t.jsxs)(i.p,{children:["While you can have multiple builds for the same version of your plugin, you can only have one deployment for a version of your plugin.\nSo if you want to publish a new version of your plugin, you will have to change the version in your ",(0,t.jsx)(i.code,{children:"manifest"})," by runnning\n",(0,t.jsx)(i.code,{children:"arkitekt manifest version patch"})," or ",(0,t.jsx)(i.code,{children:"arkitekt manifest version minor"})," or ",(0,t.jsx)(i.code,{children:"arkitekt manifest version major"})," and then build and publish your plugin again."]})}),"\n",(0,t.jsx)(i.admonition,{title:"On Registries",type:"note",children:(0,t.jsx)(i.p,{children:"The current publishing process only supports the Docker Hub as a registry and as we do not have a central repository for plugins yet, relies on\ngithub to host the metadata of the plugin. You can host this anywhere you want, as long as it is accessible by the Arkitekt Server, but hopefully\nwe will have a central repository for plugins in the future."})}),"\n",(0,t.jsx)(i.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(i.p,{children:"And thats it for building your plugin. Of course, this is a very basic example, and there are many more things you can do with the builder, but this should\nget you started. If you have any questions, feel free to ask in the community forums."})]})}function c(e={}){const{wrapper:i}={...(0,o.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,i,n)=>{n.d(i,{Z:()=>a,a:()=>r});var t=n(67294);const o={},l=t.createContext(o);function r(e){const i=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(l.Provider,{value:i},e.children)}}}]);