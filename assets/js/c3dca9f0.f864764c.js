"use strict";(self.webpackChunkdoks=self.webpackChunkdoks||[]).push([[8886],{15558:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var s=n(85893),r=n(11151);n(15944);const t={id:"index",title:"Services",sidebar_label:"Services",sidebar_position:1},a="Services",o={id:"design/services/index",title:"Services",description:"Arkitekt is designed to be a flexible and modular platform that can stand as a central backbone for a wide variety of biological analysis needs in lab.",source:"@site/docs/design/services/index.mdx",sourceDirName:"design/services",slug:"/design/services/",permalink:"/docs/design/services/",draft:!1,unlisted:!1,editUrl:"https://github.com/jhnnsrs/doks/edit/master/docs/design/services/index.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"index",title:"Services",sidebar_label:"Services",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Design",permalink:"/docs/design/"},next:{title:"Fluss",permalink:"/docs/design/services/fluss"}},c={},d=[{value:"Services in Arkitekt",id:"services-in-arkitekt",level:2},{value:"Technical Design of the Services",id:"technical-design-of-the-services",level:2},{value:"Design Principles",id:"design-principles",level:4},{value:"Current Tech Stack",id:"current-tech-stack",level:4}];function l(e){const i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"services",children:"Services"}),"\n",(0,s.jsx)(i.p,{children:"Arkitekt is designed to be a flexible and modular platform that can stand as a central backbone for a wide variety of biological analysis needs in lab.\nThis modularity and composability of the platform is ensured by the use of a (micro)-service architecture, where each service is designed to be a standalone\ncomponent that can be used independently or in combination with other services. A service in the Arkitekt platform is a containerized web-server that can be\nprovides API endpoints for its functionality."}),"\n",(0,s.jsx)(i.h2,{id:"services-in-arkitekt",children:"Services in Arkitekt"}),"\n",(0,s.jsx)(i.p,{children:"The following are the core services that are installed in a default Arkitekt platform:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"/docs/design/services/lok",children:"Lok"}),": Authorization and Authentication service"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"/docs/design/services/rekuest",children:"Rekuest"}),": Node Repository and Task-Assignment"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"/docs/design/services/port",children:"Port"}),": Virtualizion of plugin apps"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"/docs/design/services/mikro",children:"Mikro"}),": Microscopy Data Management"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"/docs/design/services/fluss",children:"Fluss"}),": Workflow management"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Other services can be added to the platform as needed. Some additional services that are available in the Arkitekt platform are:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"/docs/design/services/omeroark",children:"OmeroArk"}),": OMERO integration"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"kluster.mdx",children:"Kluster"}),": Dask-Cluster management"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"technical-design-of-the-services",children:"Technical Design of the Services"}),"\n",(0,s.jsx)(i.h4,{id:"design-principles",children:"Design Principles"}),"\n",(0,s.jsx)(i.p,{children:"While the Services in Arkitekt can be designed in a variety of ways, the following are some of the key design principles that are followed in the design of the services:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Containerized"}),": Each service is designed to be a containerized web-server that can be deployed in a containerized environment (e.g. Docker, Kubernetes)."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"GraphQL API"}),": Each service provides a GraphQL API that can be used to interact with the service. This allows for a flexible and powerful way to interact with the service."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"No inter-service communication"}),": While Arkitekt adopts a clear seperation of concerns and modularity in its design, the services are designed to act completely independently and do not\ncommunicate with each other (as opposed to some micro-service architectures where services communicate with each other). This is to ensure that the services\ncan develop and evolve independently and can be used in a variety of combinations."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"** JWT Authentication and Authorization**: Each service can be configured to use a variety of authentication and authorization mechanisms. However, In order to ensure a consistent and distibributed authentication\neach service accepts JWT tokens that are used to authenticate."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Database"}),": Each service can be configured to use a variety of databases. However, the default database used in the Arkitekt platform is a PostgreSQL database."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Configuration"}),": Each service should be configurable using a configuration file and environment variables. This configuration is generated when installaling the platform\nthrough the Arkitekt CLI or Konstruktor."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Logging and Monitoring"}),": Each service logs its activity to standard output."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"current-tech-stack",children:"Current Tech Stack"}),"\n",(0,s.jsx)(i.p,{children:"The following are the current base technologies that are used in the design of the services:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Language"}),": Python"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Web Framework"}),": Django"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"GraphQL"}),": Graphene"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Database"}),": PostgreSQL"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"While the above technologies are used as the base, the services can be designed using a variety of technologies and frameworks as needed."}),"\n",(0,s.jsx)(i.admonition,{type:"note",children:(0,s.jsxs)(i.p,{children:["In an effort to standardize and make the backend services more testable and type-safe, we are currently in the process of migrating the services\nto use ",(0,s.jsx)(i.code,{children:"Strawberry"})," a wildely used Python GraphQL library that is designed to be more type-safe and testable."]})}),"\n",(0,s.jsx)(i.admonition,{type:"info",children:(0,s.jsx)(i.p,{children:"While Django might not be the most performant web-framework, it is chosen as the base web-framework for the services due to its flexibility,\nmodularity and the wide variety of libraries and tools that are available for it. If you are designing a service that requires high-performance\nor has specific requirements, you can choose to use a different web-framework."})})]})}function h(e={}){const{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);